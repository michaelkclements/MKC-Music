// Pre-defined mkcins
// Background image size fill
@mixin background-size() {
    background-position:center;
    background-size:cover;
    background-repeat:no-repeat;
}

// Border box with ease
@mixin border-box() {
    -moz-box-sizing: border-box;
    box-sizing: border-box;
}

// Clearfix from Bootstrap
@mixin clearfix() {
    &:before,
    &:after {
        content: '';
        display: table;
    }
    &:after {
        clear: both;
    }
}

// Adds an ellipsis to text
@mixin ellipsis() {
    overflow:hidden;
    text-overflow:ellipsis;
    white-space:nowrap;
}

// Hyphenate broken words
@mixin hyphen-wrap() {
    word-break: break-word;
    -webkit-hyphens: auto;
    -moz-hyphens: auto;
    -ms-hyphens: auto;
    hyphens: auto;
}

// Most the time for user-select I choose none
@mixin user-select-none() {
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

// Mixins with parameters
// Animation
@mixin animation($animate...) {
    $max: length($animate);
    $animations: '';

    @for $i from 1 through $max {
        $animations: #{$animations + nth($animate, $i)};

        @if $i < $max {
            $animations: #{$animations + ", "};
        }
    }
    -webkit-animation: $animations;
    -moz-animation:    $animations;
    -ms-animation:     $animations;
    animation:         $animations;
}

// Appearance
@mixin appearance($string) {
    -webkit-appearance: $string;
    -moz-appearance: $string;
}

// Backface visibility
@mixin backface-visibility($visibility){
    -webkit-backface-visibility: $visibility;
    -moz-backface-visibility: $visibility;
    backface-visibility: $visibility;
}

// Box sizing
@mixin box-sizing($type) {
    -moz-box-sizing: $type;
     box-sizing: $type;
}

// Cursor
@mixin cursor($type){
    cursor: -webkit-#{$type};
    cursor: -moz-#{$type};
    cursor: $type;
}

// Filters
@mixin filter($string) {
    -webkit-filter: $string;
    -moz-filter: $string;
    -ms-filter: $string;
    filter: $string;
}

@mixin blur($px) {
    -webkit-filter: blur($px);
    -moz-filter: blur($px);
    -ms-filter: blur($px);
    filter: blur($px);
}

// Fonts
@mixin font-face($family, $src, $style: normal, $weight: normal) {
    @font-face {
        font-family: $family;
        src: url('#{$src}.woff') format('woff'),
             url('#{$src}.ttf') format('truetype');
        font-style: $style;
        font-weight: $weight;
    }
}

// Gradients
@mixin gradient-horizontal($start-color, $end-color, $start-percent: 0%, $end-percent: 100%) {
    background-image: -webkit-linear-gradient(left, color-stop($start-color $start-percent), color-stop($end-color $end-percent));
    background-image: -moz-linear-gradient(left, color-stop($start-color $start-percent), color-stop($end-color $end-percent));
    background-image: -ms-linear-gradient(left, color-stop($start-color $start-percent), color-stop($end-color $end-percent));
    background-image:  linear-gradient(to right, $start-color $start-percent, $end-color $end-percent);
    background-repeat: repeat-x;
    filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}', GradientType=1);
}

@mixin gradient-vertical($start-color, $end-color, $start-percent: 0%, $end-percent: 100%) {
    background-image: -webkit-linear-gradient(top, $start-color $start-percent, $end-color $end-percent);
    background-image: -moz-linear-gradient(top, $start-color $start-percent, $end-color $end-percent);
    background-image: -ms-linear-gradient(top, $start-color $start-percent, $end-color $end-percent);
    background-image: linear-gradient(to bottom, $start-color $start-percent, $end-color $end-percent);
    background-repeat: repeat-x;
    filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}', GradientType=0);
}

@mixin gradient-directional($start-color, $end-color, $deg: 45deg, $start-percent: 0%, $end-percent: 100%) {
    background-image: -webkit-linear-gradient($deg, $start-color $start-percent, $end-color $end-percent);
    background-image: -moz-linear-gradient($deg, $start-color $start-percent, $end-color $end-percent);
    background-image: -ms-linear-gradient($deg, $start-color $start-percent, $end-color $end-percent);
    background-image: linear-gradient($deg, $start-color $start-percent, $end-color $end-percent);
    background-repeat: repeat-x;
}

@mixin gradient-horizontal-three-colors($start-color, $mid-color, $end-color, $color-stop: 50%) {
    background-image: -webkit-linear-gradient(left, $start-color, $mid-color $color-stop, $end-color);
    background-image: -moz-linear-gradient(left, $start-color, $mid-color $color-stop, $end-color);
    background-image: -ms-linear-gradient(left, $start-color, $mid-color $color-stop, $end-color);
    background-image: linear-gradient(to right, $start-color, $mid-color $color-stop, $end-color);
    background-repeat: no-repeat;
    filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}', GradientType=1);
}

@mixin gradient-vertical-three-colors($start-color, $mid-color, $end-color, $color-stop: 50%) {
    background-image: -webkit-linear-gradient($start-color, $mid-color $color-stop, $end-color);
    background-image: -moz-linear-gradient($start-color, $mid-color $color-stop, $end-color);
    background-image: -ms-linear-gradient($start-color, $mid-color $color-stop, $end-color);
    background-image: linear-gradient($start-color, $mid-color $color-stop, $end-color);
    background-repeat: no-repeat;
    filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}', GradientType=0);
}

@mixin gradient-radial($inner-color, $outer-color) {
    background-color:$inner-color;
    background-image: -webkit-radial-gradient(circle, $inner-color, $outer-color);
    background-image: -moz-radial-gradient(circle, $inner-color, $outer-color);
    background-image: -ms-radial-gradient(circle, $inner-color, $outer-color);
    background-image: radial-gradient(circle, $inner-color, $outer-color);
    background-repeat: no-repeat;
}

@mixin gradient-striped($color, $angle: 45deg) {
    background-image: -webkit-linear-gradient($angle, $color 25%, transparent 25%, transparent 50%, $color 50%, $color 75%, transparent 75%, transparent);
    background-image: -moz-linear-gradient($angle, $color 25%, transparent 25%, transparent 50%, $color 50%, $color 75%, transparent 75%, transparent);
    background-image: -ms-linear-gradient($angle, $color 25%, transparent 25%, transparent 50%, $color 50%, $color 75%, transparent 75%, transparent);
    background-image: linear-gradient($angle, $color 25%, transparent 25%, transparent 50%, $color 50%, $color 75%, transparent 75%, transparent);
}

@mixin gradient-linear($angle, $colour-args...) {
    background: -webkit-linear-gradient($angle, $colour-args);
    background: -moz-linear-gradient($angle, $colour-args);
    background: -ms-linear-gradient($angle, $colour-args);
    background: linear-gradient($angle, $colour-args);
}

// Keyframes
@mixin keyframes($animationName) {
    @-webkit-keyframes #{$animationName} {
        @content;
    }
    @-moz-keyframes #{$animationName} {
        @content;
    }
    @-ms-keyframes #{$animationName} {
        @content;
    }
    @keyframes #{$animationName} {
        @content;
    }
}

// Transition
@mixin transition($args...) {
    -webkit-transition: $args;
    -moz-transition: $args;
    -ms-transition: $args;
    transition: $args;
}

// Transforms
@mixin transform($string){
    -webkit-transform: $string;
    -moz-transform: $string;
    -ms-transform: $string;
    transform: $string;
}

@mixin scale($args...) {
    -webkit-transform: scale($args);
    -moz-transform: scale($args);
    -ms-transform: scale($args);
    transform: scale($args);
}

@mixin skew($deg, $deg2) {
    -webkit-transform: skew($deg, $deg2);
    -moz-transform: skew($deg, $deg2);
    -ms-transform: skew($deg, $deg2);
    transform: skew($deg, $deg2);
}

@mixin rotate($deg) {
    -webkit-transform: rotate($deg);
    -moz-transform: rotate($deg);
    -ms-transform: rotate($deg);
    transform: rotate($deg);
}

@mixin rotateX($deg) {
    -webkit-transform: rotateX($deg);
    -moz-transform: rotateX($deg);
    -ms-transform: rotateX($deg);
    transform: rotateX($deg);
}

@mixin rotateY($deg) {
    -webkit-transform: rotateY($deg);
    -moz-transform: rotateY($deg);
    -ms-transform: rotateY($deg);
    transform: rotateY($deg);
}

@mixin rotateZ($deg) {
    -webkit-transform: rotateZ($deg);
    -moz-transform: rotateZ($deg);
    -ms-transform: rotateZ($deg);
    transform: rotateZ($deg);
}

@mixin shape-outside($value) {
    -webkit-shape-outside:$value;
    shape-outside:$value;
}

@mixin translate($x, $y) {
    -webkit-transform: translate($x, $y);
    -moz-transform: translate($x, $y);
    -ms-transform: translate($x, $y);
    transform: translate($x, $y);
}

@mixin translateX($x) {
    -webkit-transform: translateX($x);
    -moz-transform: translateX($x);
    -ms-transform: translateX($x);
    transform: translateX($x);
}

@mixin translateY($y) {
    -webkit-transform: translateY($y);
    -moz-transform: translateY($y);
    -ms-transform: translateY($y);
    transform: translateY($y);
}

@mixin translateZ($z) {
    -webkit-transform: translateZ($z);
    -moz-transform: translateZ($z);
    -ms-transform: translateZ($z);
    transform: translateZ($z);
}

@mixin translate3d($x, $y, $z) {
    -webkit-transform: translate3d($x, $y, $z);
    -moz-transform: translate3d($x, $y, $z);
    -ms-transform: translate3d($x, $y, $z);
    transform: translate3d($x, $y, $z);
}

// Transform origin
@mixin transform-origin($x, $y, $z: 0) {
    -webkit-transform-origin: $x $y $z;
    -moz-transform-origin: $x $y $z;
    -ms-transform-origin: $x $y $z;
    transform-origin: $x $y $z;
}

// Transform style
@mixin transform-style($style) {
    -webkit-transform-style: $style;
    -moz-transform-style: $style;
    -ms-transform-style: $style;
    transform-style: $style;
}

// Perspective
@mixin perspective($value) {
    -webkit-perspective: $value;
    -moz-perspective: $value;
    -ms-perspective: $value;
    perspective: $value;
}

// Perspective origin
@mixin perspective-origin($value) {
    -webkit-perspective-origin: $value;
    -moz-perspective-origin: $value;
    -ms-perspective-origin: $value;
    perspective-origin: $value;
}

// User select
@mixin user-select($string) {
    -webkit-user-select: $string;
    -moz-user-select: $string;
    -ms-user-select: $string;
    user-select: $string;
}
